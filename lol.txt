package com.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.setExtractBareNamePropertyMethods;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.model.Employee;
import com.repository.EmployeeRepository;

@SpringBootTest
class EmployeeServiceTest {

	@Autowired
	private EmployeeService employeeService;

	@MockBean
	private EmployeeRepository employeeRepository;

	@BeforeEach
	void setup() {
		Employee employee = new Employee(1, "Rehan Sarwar", 42450.00);
		Optional<Employee> employeeOptional = Optional.of(employee);
		Mockito.when(employeeRepository.findById(1)).thenReturn(employeeOptional);
	}

	@Test
	@Order(1)
	public void testGetEmployeeById() {
		String employee_name = "Rehan Sarwar";
		Employee employeeId = employeeService.findById(1);
		assertEquals(employee_name, employeeId.getName());
	}

	@Test
	@Order(2)
	public void testGetEmployeeByName() {
		String employeeNameToFind = "Rehan Sarwar";

		List<Employee> employees = List.of(new Employee(1, employeeNameToFind, 42450.00),
				new Employee(2, employeeNameToFind, 3296.00));
		when(employeeRepository.findByName(employeeNameToFind)).thenReturn(employees);

		List<Employee> foundEmployees = employeeService.findEmployeeByName(employeeNameToFind);

		assertNotNull(foundEmployees);

		for (Employee employee : foundEmployees) {
			assertEquals(employeeNameToFind, employee.getName());
		}
	}

	@Test
	@Order(3)
	void testGetAllEmployees() {
		List<Employee> employees = List.of(new Employee(1, "Moni Roy", 12879.00),
				new Employee(2, "Raju Roy", 32960.00));

		when(employeeRepository.findAll()).thenReturn(employees);

		List<Employee> allEmployees = employeeService.findAllEmployees();

		assertNotNull(allEmployees);
		assertEquals(2, allEmployees.size());
	}

	@Test
	@Order(4)
	public void testSaveEmployee() {
		Employee employee = new Employee("Rehan Sarwar", 42450.00);
		Employee createEmployee = employeeService.saveEmployee(employee);

		assertNotNull(createEmployee.getId());
		assertEquals(employee.getName(), createEmployee.getName());
	}

}
