package com.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.model.Employee;
import com.repository.EmployeeRepository;

@SpringBootTest
class EmployeeServiceTest {

    @Autowired
    private EmployeeService employeeService;

    @Mock
    private EmployeeRepository employeeRepository;

    @BeforeEach
    void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetEmployeeById() {
        Integer employeeId = 1;
        String employeeName = "Rehan Sarwar";

        when(employeeRepository.findById(employeeId))
                .thenReturn(Optional.of(new Employee(employeeId, employeeName, 42450.00)));

        Employee employee = employeeService.findById(employeeId);

        assertEquals(employeeName, employee.getName());
    }

    @Test
    void testGetAllEmployees() {
        List<Employee> allEmployees = new ArrayList<>();
        allEmployees.add(new Employee(1, "Arjun Sharma", 47550.00));
        allEmployees.add(new Employee(2, "Sonu Rama", 27250.00));

        when(employeeRepository.findAll()).thenReturn(allEmployees);

        List<Employee> getAllEmployees = employeeService.findAllEmployees();

        assertNotNull(getAllEmployees);
        assertEquals(2, getAllEmployees.size());
    }

    @Test
    public void testSaveEmployee() {
        Employee employee = new Employee("Rehan Sarwar", 42450.00);

        when(employeeRepository.save(employee)).thenReturn(new Employee(1, employee.getName(), employee.getSalary()));

        Employee createEmployee = employeeService.saveEmployee(employee);

        assertNotNull(createEmployee.getId());
        assertEquals(employee.getName(), createEmployee.getName());
    }

    @Test
    public void testGetEmployeeByName() {
        String employeeNameToFind = "Rehan Sarwar";
        List<Employee> employees = List.of(
                new Employee(1, employeeNameToFind, 42450.00),
                new Employee(2, employeeNameToFind, 3296.00)
        );

        when(employeeRepository.findByName(employeeNameToFind)).thenReturn(employees);

        List<Employee> foundEmployees = employeeService.findEmployeeByName(employeeNameToFind);

        assertNotNull(foundEmployees);

        for (Employee employee : foundEmployees) {
            assertEquals(employeeNameToFind, employee.getName());
        }
    }

    @Test
    public void testDeleteEmployee() {
        Integer employeeIdToDelete = 1;

        when(employeeRepository.findById(employeeIdToDelete))
                .thenReturn(Optional.of(new Employee(employeeIdToDelete, "Rehan Sarwar", 42450.00)));

        when(employeeRepository.existsById(employeeIdToDelete)).thenReturn(true);
        
        String isDeleted = employeeService.deleteEmployee(employeeIdToDelete);

        assertEquals("Employee deleted successfully", isDeleted);

        // Verify that the employee is no longer in the database
        when(employeeRepository.existsById(employeeIdToDelete)).thenReturn(false);
        
        Optional<Employee> deletedEmployeeOptional = Optional.ofNullable(employeeService.findById(employeeIdToDelete));

        assertFalse(deletedEmployeeOptional.isPresent());
    }
}
