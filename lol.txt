package com.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import com.model.Employee;
import com.repository.EmployeeRepository;

@Service("employeeService")
@Scope("singleton")
public class EmployeeService implements IEmployeeService {

	@Autowired
	@Qualifier("employeeRepository")
	private EmployeeRepository employeeRepository;

	@Override
	public Employee saveEmployee(Employee employee) {
		return employeeRepository.save(employee);
	}

	@Override
	public List<Employee> saveEmployees(List<Employee> employees) {
		return employeeRepository.saveAll(employees);
	}

	@Override
	public List<Employee> findAllEmployees() {
		return employeeRepository.findAll();
	}

	@Override
	public Employee updateEmployee(Employee employee) {
		return employeeRepository.save(employee);
	}

	@Override
	public List<Employee> findEmployeeByName(String name) {
		List<Employee> employees = employeeRepository.findByName(name);
		if (!employees.isEmpty()) {
			return employees;
		} else {
			throw new IllegalArgumentException("No Employee found with NAME: " + name);
		}
	}

	@Override
	public Employee findById(Integer id) {
		Optional<Employee> employee = employeeRepository.findById(id);
		if (employee.isPresent()) {
			return employee.get();
		} else {
			throw new IllegalArgumentException("Employee with ID " + id + " not found");
		}
	}

	@Override
	public void deteteEmployee(Integer id) {
		Optional<Employee> employee = employeeRepository.findById(id);
		if (employee.isPresent()) {
			employeeRepository.deleteById(id);
		} else {
			// Handle the case when the employee with the specified ID is not found
			throw new IllegalArgumentException("Employee with ID " + id + " not found");
		}
	}
}
